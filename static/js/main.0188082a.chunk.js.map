{"version":3,"sources":["components/Editor.js","components/Previewer.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","handleChange","inputMarkdown","id","value","className","onChange","Previewer","renderer","marked","Renderer","link","href","title","text","setOptions","breaks","dangerouslySetInnerHTML","__html","App","props","e","setState","target","state","bind","this","Badge","variant","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAUeA,EARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACb,0BACEC,GAAG,SACHC,MAAOF,EACPG,UAAU,iBACVC,SAAUL,K,gBCeCM,EApBG,SAAC,GAAuB,IAArBL,EAAoB,EAApBA,cAEbM,EAAW,IAAIC,IAAOC,SAS5B,OARAF,EAASG,KAAO,SAASC,EAAMC,EAAOC,GACpC,MAAM,2BAAN,OAAkCF,EAAlC,YAA0CE,EAA1C,SAGFL,IAAOM,WAAW,CAChBC,QAAQ,IAIR,qBACEb,GAAG,UACHE,UAAU,aACVY,wBAAyB,CAAEC,OAAQT,IAAOP,EAAe,CAAEM,iBCwElDW,G,wDAvDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORnB,aAAe,SAAAoB,GACb,EAAKC,SAAS,CACZpB,cAAemB,EAAEE,OAAOnB,SAR1B,EAAKoB,MAAQ,CACXtB,cA/BE,isBAiCJ,EAAKD,aAAe,EAAKA,aAAawB,KAAlB,gBALH,E,0CAcnB,WACE,IAAMvB,EAAgBwB,KAAKF,MAAMtB,cAEjC,OACE,qBAAKG,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,wBAAf,SACE,6BACE,cAACsB,EAAA,EAAD,CAAOtB,UAAU,oBAAoBuB,QAAQ,OAA7C,oCAGJ,sBAAKvB,UAAU,WAAWF,GAAG,iBAA7B,UACE,qBAAKE,UAAU,kBAAf,SACE,6BACE,cAACsB,EAAA,EAAD,CAAOtB,UAAU,oBAAoBuB,QAAQ,OAA7C,wBAGJ,8BACE,+BACE,cAAC,EAAD,CAAQ3B,aAAcyB,KAAKzB,aACnBC,cAAeA,WAK7B,sBAAKG,UAAU,WAAWF,GAAG,kBAA7B,UACE,qBAAKE,UAAU,kBAAf,SACE,6BACE,cAACsB,EAAA,EAAD,CAAOtB,UAAU,oBAAoBuB,QAAQ,OAA7C,2BAGJ,cAAC,EAAD,CAAW1B,cAAeA,kB,GA/CtB2B,IAAMC,YCrBTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0188082a.chunk.js","sourcesContent":["// import { useState } from 'react';\r\n\r\nconst Editor = ({ handleChange, inputMarkdown }) => (\r\n  <textarea \r\n    id=\"editor\" \r\n    value={inputMarkdown} \r\n    className=\"textAreaStyles\"\r\n    onChange={handleChange} />\r\n);\r\n\r\nexport default Editor\r\n","import marked from 'marked';\r\n\r\nconst Previewer = ({ inputMarkdown }) => {\r\n\r\n  const renderer = new marked.Renderer();\r\n  renderer.link = function(href, title, text) {\r\n    return `<a target=\"_blank\" href=${href}>${text}</a>`;\r\n  };\r\n\r\n  marked.setOptions({\r\n    breaks: true\r\n  });\r\n\r\n  return (\r\n    <div\r\n      id=\"preview\"\r\n      className=\"prevStyles\"\r\n      dangerouslySetInnerHTML={{ __html: marked(inputMarkdown, { renderer }) }}>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Previewer\r\n","import React from 'react';\nimport Badge from \"react-bootstrap/Badge\";\nimport Editor from './components/Editor.js';\nimport Previewer from './components/Previewer.js';\nimport './App.css';\n\nconst md = `# this is a markdown previewer\n## This is a secondary heading! \n> front end libraries projects on [freeCodeCamp](https://www.freecodecamp.org/)\n- Random Quote Machine\n- Markdown Previewer\n- Drum Machine\n- Javascript Calculator\n- Pomodoro Clock\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine ==  && lastLine == ) {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n![React Logo](https://brandlogovector.com/wp-content/uploads/2020/08/React-Logo.png)\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputMarkdown: md\n    }\n    this.handleChange = this.handleChange.bind(this);\n  };\n\n  handleChange = e => {\n    this.setState({\n      inputMarkdown: e.target.value\n    });\n  };\n\n  render() {\n    const inputMarkdown = this.state.inputMarkdown;\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n            <div className=\"col-md-12 text-center\">\n              <h1>\n                <Badge className=\"text-align-center\" variant=\"dark\">Markdown Previewer</Badge>\n              </h1>\n            </div>\n            <div className=\"col-md-6\" id=\"editor-wrapper\">\n              <div className=\"col text-center\">\n                <h2>\n                  <Badge className=\"text-align-center\" variant=\"info\">Editor</Badge>\n                </h2>\n              </div>\n              <div>\n                <form>\n                  <Editor handleChange={this.handleChange}\n                          inputMarkdown={inputMarkdown} />\n                </form>\n              </div>\n            </div>\n        \n            <div className=\"col-md-6\" id=\"preview-wrapper\">\n              <div className=\"col text-center\">\n                <h2>\n                  <Badge className=\"text-align-center\" variant=\"info\">Previewer</Badge>\n                </h2>\n              </div>              \n              <Previewer inputMarkdown={inputMarkdown} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}